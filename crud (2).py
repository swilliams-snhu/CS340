from pymongo import MongoClientfrom bson.objectid import ObjectIdimport pprintclass AnimalShelter(object):    """ CRUD operations for Animal collection in MongoDB """    def __init__(self):        # Initializing the MongoClient. This helps to         # access the MongoDB databases and collections.         username = 'aacuser'        password = 'password'        database = 'AAC'        self.client = MongoClient('mongodb://%s:%s@localhost:35794/%s' % (username, password, database))        self.database = self.client['AAC']        self.collection = self.database.animals# Complete this create method to implement the C in CRUD.    def create(self, data):        if data is not None:            self.database.animals.insert_one(data)  # data should be dictionary                    else:            raise Exception("Nothing to save, because data parameter is empty")# Create method to implement the R in CRUD.     def find(self, attr, value):        if attr is not None:            return list(self.database.animals.find({attr:value}))# Update method for U in CRUD#attrs - dictionary of key/value lookup pairs#values - dict of key/value updates    def update(self, attrs, values):        result = self.database.animals.update_many(attrs, {"$set":values})        return {'acked':result.acknowledged, 'matched_count':result.matched_count,'modified_count':result.modified_count}# Delete method for D in CRUD#attrs - dictionary of key/value lookup pairs    def delete(self, attrs):        result = self.database.animals.delete_many(attrs)        return {'deleted_count':result.deleted_count}    def test(self):        return 'test'    def findMany(self, attrs):        if attrs is not None:            return list(self.database.animals.find(attrs))class AnimalShelter(object):    """ CRUD operations for Animal collection in MongoDB """    def __init__(self, username, password):        # Initializing the MongoClient. This helps to         # access the MongoDB databases and collections.         #username = 'aacuser'        #password = 'password'        database = 'AAC'        self.client = MongoClient('mongodb://%s:%s@localhost:35794/%s' % (username, password, database))        self.database = self.client['AAC']        self.collection = self.database.animals# Complete this create method to implement the C in CRUD.    def create(self, data):        if data is not None:            self.database.animals.insert_one(data)  # data should be dictionary                    else:            raise Exception("Nothing to save, because data parameter is empty")# Create method to implement the R in CRUD.     def find(self, attr, value):        if attr is not None:            return list(self.database.animals.find({attr:value}))# Update method for U in CRUD#attrs - dictionary of key/value lookup pairs#values - dict of key/value updates    def update(self, attrs, values):        result = self.database.animals.update_many(attrs, {"$set":values})        return {'acked':result.acknowledged, 'matched_count':result.matched_count,'modified_count':result.modified_count}# Delete method for D in CRUD#attrs - dictionary of key/value lookup pairs    def delete(self, attrs):        result = self.database.animals.delete_many(attrs)        return {'deleted_count':result.deleted_count}    def test(self):        return 'test'    def findMany(self, attrs):        if attrs is not None:            return list(self.database.animals.find(attrs))    def read(self, attrs):        if attrs is not None:            return self.database.animals.find(attrs)def main():    animalShelter = AnimalShelter()    result = animalShelter.find("name", "Frank")    pprint.pprint(result)    data = {"name":"Jax"}    #animalShelter.create(data)    result = animalShelter.find("name", "Jax")    pprint.pprint(result)    #for quick testing#if __name__ == "__main__":#    main()    